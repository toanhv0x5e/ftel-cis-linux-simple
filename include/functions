#!/bin/sh
# cis-linux-simple: script to audit linux using cis benchmark - toanhv2@fpt.com.vn

# list functions:
# - function Display {}
# - function DetectOS {}
# - function DisplayHeader {}
# - function ReloadReport {}
# - function ReportLine {}
# - function AddScore {}
# - function TotalScore {}
# - function SummaryReport {}
# - function Debug {}

#===============================================================================
# usage: Display --indent <value> --text <text> --result <result> --color <color>
# description: n/a
#===============================================================================
function Display {
    INDENT=0; TEXT=""; RESULT=""; COLOR=""; SPACES=0;
    while [ $# -ge 1 ]; do
        case $1 in
            --color)
                shift
                    case $1 in
                      GREEN)   COLOR=$GREEN   ;;
                      RED)     COLOR=$RED     ;;
                      WHITE)   COLOR=$WHITE   ;;
                      YELLOW)  COLOR=$YELLOW  ;;
                    esac
            ;;
            --indent)
                shift
                INDENT=$1
            ;;
            --text)
                shift
                TEXT=$1
            ;;
            --result)
                shift
                RESULT=$1
            ;;
            *)
                echo "cis-linux-simple: Invalid option (Display): $1"
                exit 1
            ;;
        esac
        # Go to next parameter
        shift
    done

    if [ "${RESULT}" = "" ]; then
        RESULTPART=""
      else
        RESULTPART=" [ ${COLOR}${RESULT}${NORMAL} ]"
    fi

    if [ ! "${TEXT}" = "" ]; then
        #LINESIZE=$(export LC_ALL= ; export LANG="${DISPLAY_LANG}";echo "${TEXT}" | wc -m | tr -d ' ')
        LINESIZE=$(echo "${TEXT}" | wc -m | tr -d ' ')
        if [ "${LINESIZE}" -ge "65" ]; then
            # Split output if too long
            TEXT1=${TEXT:0:60}
            TEXT2=${TEXT:60}
            LINESIZE=$(echo "${TEXT2}" | wc -m | tr -d ' ')
        else
            TEXT1=${TEXT}
            TEXT2=""
            LINESIZE=$(echo "${TEXT1}" | wc -m | tr -d ' ')
        fi

        if [ ${INDENT} -gt 0 ]; then SPACES=$((70 - INDENT - LINESIZE)); fi
        if [ ${SPACES} -lt 0 ]; then SPACES=0; fi
        if [ "${TEXT2}" = "" ]; then
            echo -e "\033[${INDENT}C${TEXT1}\033[${SPACES}C${RESULTPART}"
        else
            echo -e "\033[${INDENT}C${TEXT1}"
            echo -e "\033[${INDENT}C${TEXT2}\033[${SPACES}C${RESULTPART}"
        fi
    fi
}

#===============================================================================
# usage: DetectOS
# description: detect operating system, test profile and depend functions
#===============================================================================
function DetectOS {
    case $(uname) in
        Linux)
            OS="Linux"
            OS_NAME="Linux"
            OS_FULLNAME=""
            OS_VERSION=$(uname -r)
            LINUX_VERSION=""
            HARDWARE=$(uname -m)
            HOMEDIRS="/home"
            OS_KERNELVERSION_FULL=$(uname -r)
            OS_KERNELVERSION=$(echo ${OS_KERNELVERSION_FULL} | sed 's/-.*//')
            HOSTNAME=$(hostname -s)
            # Red Hat based
            if [ -e "/etc/redhat-release" ]; then
                # CentOS
                FIND=$(grep "CentOS" /etc/redhat-release)
                if [ ! "${FIND}" = "" ]; then
                    OS_FULLNAME=$(grep "CentOS" /etc/redhat-release)
                    LINUX_VERSION="CentOS"
                    OS_VERSION="${OS_FULLNAME}"
                fi
                # Fedora
                # RHEL
            fi

            if [ ! "${LINUX_VERSION}" = "" -a "${OS_NAME}" = "Linux" ]; then
                OS_NAME="${LINUX_VERSION}"
            fi
            # If Linux version (full name) is unknown, use uname value
            if [ "${OS_FULLNAME}" = "" ]; then OS_FULLNAME=$(uname -s -r); fi
        ;;

        *)
            echo "cis-linux-simple: Operating system is not supported"
            exit 1
        ;;
    esac
    #
    #
    #
    if [ "${OS_NAME}" = "CentOS" ]; then
        local CENTOSVERSION=$(rpm -qa \*-release | grep -Ei "oracle|redhat|centos" | cut -d"-" -f3)
        case ${CENTOSVERSION} in
            6)
                TESTPROFILE="${PROFILEDIR}/centos6.csv"
                if [ -f "${INCLUDEDIR}/centos6" ]; then source ${INCLUDEDIR}/centos6; else echo -e "cis-linux-simple: Include files does not exist"; exit 1; fi
            ;;

            7)
                TESTPROFILE="${PROFILEDIR}/centos7.csv"
                if [ -f "${INCLUDEDIR}/centos7" ]; then source ${INCLUDEDIR}/centos7; else echo -e "cis-linux-simple: Include files does not exist"; exit 1; fi
            ;;

            *)
                echo -e "cis-linux-simple: Operating system is not supported"
                exit 1
            ;;
        esac
    else
        echo -e "cis-linux-simple: Operating system is not supported"
        exit 1
    fi

    if [ ! -f "${TESTPROFILE}" ]; then echo -e "cis-linux-simple: Database file does not exist"; exit 1; fi
    TESTCOMPLIANCE=$(awk -F, '{if (NR==1) print $1}' ${TESTPROFILE} 2> /dev/null)
    TESTCOMPLIANCE=$(echo "${TESTCOMPLIANCE:2}" 2> /dev/null)
}

#===============================================================================
# usage: DisplayHeader
# description: n/a
#===============================================================================
function DisplayHeader {
    echo -e "\n${WHITE}${PROGRAM}${NORMAL}"
    echo -e "\n================================================================================\n"
    echo -e "  Script to audit linux using CIS Benchmark"
    echo -e "  Copyright 2017. Van-Toan Ha - toanhv2@fpt.com.vn"
    echo -e "\n================================================================================\n"
    echo -e "[+] ${YELLOW}General Information${NORMAL}\n----------------------------------------\n"
    echo -e "  Operating system:            ${OS}"
    echo -e "  Operating system name:       ${OS_NAME}"
    echo -e "  Operating system version:    ${OS_VERSION}"
    echo -e "  ----------------------------------------"
    echo -e "  Compliance name:             ${TESTCOMPLIANCE}"
    echo -e "  Compliance profile:          ${TESTPROFILE}"
    echo -e "  Report file:                 ${TESTREPORTCSV}"
    echo -e "  ----------------------------------------"
    echo -n "  Please choose level to assess: [default=1] "; read TESTLEVEL
    if [ ! "${TESTLEVEL}" = "1" ] && [ ! "${TESTLEVEL}" = "2" ]; then 
        echo -e "  ${RED}Invalid level. Assessment with default level${NORMAL}"
        TESTLEVEL=1
    else
        echo -e "  ${WHITE}Assessment with level ${TESTLEVEL}${NORMAL}"
    fi
}

#===============================================================================
# usage: ReportLine <section> <title> <score> <result>
# description: export report to CSV file
#===============================================================================
function ReloadReport {
    if [ ! "${TESTREPORTCSV}" = "" ]; then rm -rf ${TESTREPORTCSV} 2> /dev/null; fi

    ReportLine "# ${TESTCOMPLIANCE}"
    ReportLine "# Level ${TESTLEVEL}"
    ReportLine "# IP Address: ${IPADDR}"
    ReportLine "# Testcase" "Score" "Result"
}

function ReportLine {
    if [ ! "${TESTREPORTCSV}" = "" ]; then echo "$1,$2,$3,$4" >> ${TESTREPORTCSV}; fi
}

#===============================================================================
# usage: AddScore|TotalScore <value>
# description: Add value to current score
#===============================================================================
function AddScore {
    TESTSCORE=$((${TESTSCORE} + ${1}))
}

function TotalScore {
    TESTTOTALSCORE=$((${TESTTOTALSCORE} + ${1}))
}

#===============================================================================
# usage: SummaryReport
# description: print summary report
#===============================================================================
function SummaryReport {
    # If no test score has been found, set value to 1
    if [ ${TESTSCORE} -eq 0 ]; then TESTSCORE=1; TESTTOTALSCORE=100; fi
    PERCENTCOMPLIANT=$((TESTSCORE * 100 / TESTTOTALSCORE))
    echo -e "\n================================================================================\n"
    echo -e "  ${WHITE}${TESTCOMPLIANCE}${NORMAL}"
    echo
    echo -e "  Level ${TESTLEVEL}"
    echo -e "  ${TESTDATETIME}"
    echo -e "  IP Address          : ${WHITE}${IPADDR}${NORMAL}"
    echo
    echo -e "  ${WHITE}Assessment Summary${NORMAL}"
    echo -e "  - Total Testcase    : ${WHITE}${TESTCOUNT}${NORMAL}"
    echo -e "  - Total Score       : ${WHITE}${TESTSCORE}/${TESTTOTALSCORE}${NORMAL}"
    echo -e "  - Percent Compliant : ${WHITE}${PERCENTCOMPLIANT}%${NORMAL}"
    echo
    echo -e "  ${WHITE}Files${NORMAL}"
    echo -e "  - Report CSV        : ${WHITE}${TESTREPORTCSV}${NORMAL}"
    echo -e "\n================================================================================\n"

    ReportLine
    ReportLine "" "Total Score" "" "${TESTSCORE}/${TESTTOTALSCORE}"
    ReportLine "" "Percent Compliant" "" "${PERCENTCOMPLIANT}%"

    rm -rf ${TESTINPUT} 2> /dev/null # Clear temp files
}

function Debug {
    echo -e "${LIGHTBLUE}cis-linux:${NORMAL} ${1} -- ${2}"
}

