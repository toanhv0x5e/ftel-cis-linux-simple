#!/bin/sh
#===============================================================================
# Color constant
#===============================================================================
    BLUE="[0;34m"
    PURPLE="[0;35m"
    CYAN="[0;36m"
    GRAY="[0;37m"
    LIGHTBLUE="[0;94m"
    RED="[1;31m"
    GREEN="[1;32m"
    YELLOW="[1;33m"
    MAGENTA="[1;35m"
    WHITE="[1;37m"
    NORMAL="[0;39m"

#===============================================================================
# Functions
#===============================================================================
function DisplayHeader {
    # General information
    echo -e "\n${WHITE}FTEL NIX AUDIT${NORMAL}"
    echo -e "\n================================================================================\n"
    echo -e "  Script to automated audit UNIX-like system"
    echo -e "  Copyright 2017. Van-Toan Ha - toanhv2@fpt.com.vn"
    echo -e "\n================================================================================\n"
    echo -e "[+] ${YELLOW}General Information${NORMAL}\n----------------------------------------\n"
    echo -e "  Operating system:            ${OS}"
    echo -e "  Operating system name:       ${OS_NAME}"
    echo -e "  Operating system version:    ${OS_VERSION}"
    echo -e "  ----------------------------------------"
    echo -e "  Compliance name:             ${TESTCOMPLIANCE}"
    echo -e "  Compliance profile:          ${TESTDATABASE}"
    echo -e "  Report file:                 ${TESTREPORTCSV}"
    echo -e "  ----------------------------------------"
    echo -n "  Please choose level to assess: [default=1] "
    read TESTLEVEL
    if [ ! "${TESTLEVEL}" = "1" ] && [ ! "${TESTLEVEL}" = "2" ]; then 
        echo -e "  ${RED}Invalid level. Assessment with default level${NORMAL}"
        TESTLEVEL=1
    else
        echo -e "  ${WHITE}Assessment with level ${TESTLEVEL}${NORMAL}"
    fi
}    

    Display() {
        INDENT=0; TEXT=""; RESULT=""; COLOR=""; SPACES=0;

        while [ $# -ge 1 ]; do
            case $1 in
                --color)
                    shift
                        case $1 in
                          GREEN)   COLOR=$GREEN   ;;
                          RED)     COLOR=$RED     ;;
                          WHITE)   COLOR=$WHITE   ;;
                          YELLOW)  COLOR=$YELLOW  ;;
                        esac
                ;;
                --indent)
                    shift
                    INDENT=$1
                ;;
                --text)
                    shift
                    TEXT=$1
                ;;
                --result)
                    shift
                    RESULT=$1
                ;;
                *)
                    echo "cis-run: Invalid option (Display): $1"
                    exit 1
                ;;
            esac
            # Go to next parameter
            shift
        done

        if [ "${RESULT}" = "" ]; then
            RESULTPART=""
          else
            RESULTPART=" [ ${COLOR}${RESULT}${NORMAL} ]"
        fi

        if [ ! "${TEXT}" = "" ]; then
            #LINESIZE=$(export LC_ALL= ; export LANG="${DISPLAY_LANG}";echo "${TEXT}" | wc -m | tr -d ' ')
            LINESIZE=$(echo "${TEXT}" | wc -m | tr -d ' ')
            if [ "${LINESIZE}" -ge "65" ]; then
                # Split output if too long
                TEXT1=${TEXT:0:60}
                TEXT2=${TEXT:60}
                LINESIZE=$(echo "${TEXT2}" | wc -m | tr -d ' ')
            else
                TEXT1=${TEXT}
                TEXT2=""
                LINESIZE=$(echo "${TEXT1}" | wc -m | tr -d ' ')
            fi

            if [ ${INDENT} -gt 0 ]; then SPACES=$((70 - INDENT - LINESIZE)); fi
            if [ ${SPACES} -lt 0 ]; then SPACES=0; fi
            if [ "${TEXT2}" = "" ]; then
                echo -e "\033[${INDENT}C${TEXT1}\033[${SPACES}C${RESULTPART}${DEBUGTEXT}"
            else
                echo -e "\033[${INDENT}C${TEXT1}"
                echo -e "\033[${INDENT}C${TEXT2}\033[${SPACES}C${RESULTPART}${DEBUGTEXT}"
            fi
        fi
    }

    ReportReload() {
        if [ ! "${TESTREPORTCSV}" = "" ]; then rm -rf ${TESTREPORTCSV} 2> /dev/null; fi
    }

    ReportLine() {
        if [ ! "${TESTREPORTCSV}" = "" ]; then echo "$1,$2,$3" >> ${TESTREPORTCSV}; fi
    }

    AddScore() {
        TESTSCORE=$((${TESTSCORE} + ${1}))
    }

    TotalScore() {
        TESTTOTALSCORE=$((${TESTTOTALSCORE} + ${1}))
    }

#===============================================================================
# OS Detection
#===============================================================================
    case $(uname) in
        Linux)
            OS="Linux"
            OS_NAME="Linux"
            OS_FULLNAME=""
            OS_VERSION=$(uname -r)
            LINUX_VERSION=""
            HARDWARE=$(uname -m)
            HOMEDIRS="/home"
            OS_KERNELVERSION_FULL=$(uname -r)
            OS_KERNELVERSION=$(echo ${OS_KERNELVERSION_FULL} | sed 's/-.*//')
            HOSTNAME=$(hostname -s)
            # Red Hat based
            if [ -e "/etc/redhat-release" ]; then
                # CentOS
                FIND=$(grep "CentOS" /etc/redhat-release)
                if [ ! "${FIND}" = "" ]; then
                    OS_FULLNAME=$(grep "CentOS" /etc/redhat-release)
                    LINUX_VERSION="CentOS"
                    OS_VERSION="${OS_FULLNAME}"
                fi
                # Fedora
                # RHEL
            fi

            if [ ! "${LINUX_VERSION}" = "" -a "${OS_NAME}" = "Linux" ]; then
                OS_NAME="${LINUX_VERSION}"
            fi
            # If Linux version (full name) is unknown, use uname value
            if [ "${OS_FULLNAME}" = "" ]; then OS_FULLNAME=$(uname -s -r); fi
        ;;

        *)
            echo "cis-run: Operating system is not supported"
            exit 1
        ;;

    esac

#===============================================================================
# cis-run
